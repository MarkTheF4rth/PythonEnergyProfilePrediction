# Energy usage info

@article{DockerRAPL,
    title = {How does docker affect energy consumption? Evaluating workloads in and out of Docker containers},
    journal = {Journal of Systems and Software},
    volume = {146},
    pages = {14-25},
    year = {2018},
    issn = {0164-1212},
    doi = {https://doi.org/10.1016/j.jss.2018.07.077},
    url = {https://www.sciencedirect.com/science/article/pii/S0164121218301456},
    author = {Eddie Antonio Santos and Carson McLean and Christopher Solinas and Abram Hindle},
    keywords = {Virtualization, Docker, Containerization, Energy consumption, Cloud computing, Microservice},
    abstract = {Context: Virtual machines provide isolation of services at the cost of hypervisors and more resource usage. This spurred the growth of systems like Docker that enable single hosts to isolate several applications, similar to VMs, within a low-overhead abstraction called containers. Motivation: Although containers tout low overhead performance, how much do they increase energy use? Methodology: This work statistically compares the energy consumption of three application workloads in Docker and on bare-metal Linux. Results: In all cases, there was a statistically significant (t-test and Wilcoxon p.05) increase in energy consumption when running tests in Docker, mostly due to the performance of I/O system calls. Developers worried about I/O overhead could consider baremetal deployments over Docker container deployments.}
}

@article{RAPLOnVMS,
    author = {Khan, Kashif Nizam and Hirki, Mikael and Niemi, Tapio and Nurminen, Jukka K. and Ou, Zhonghong},
    title = {RAPL in Action: Experiences in Using RAPL for Power Measurements},
    year = {2018},
    issue_date = {June 2018},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {3},
    number = {2},
    issn = {2376-3639},
    url = {https://doi.org/10.1145/3177754},
    doi = {10.1145/3177754},
    abstract = {To improve energy efficiency and comply with the power budgets, it is important to be able to measure the power consumption of cloud computing servers. Intel’s Running Average Power Limit (RAPL) interface is a powerful tool for this purpose. RAPL provides power limiting features and accurate energy readings for CPUs and DRAM, which are easily accessible through different interfaces on large distributed computing systems. Since its introduction, RAPL has been used extensively in power measurement and modeling. However, the advantages and disadvantages of RAPL have not been well investigated yet. To fill this gap, we conduct a series of experiments to disclose the underlying strengths and weaknesses of the RAPL interface by using both customized microbenchmarks and three well-known application level benchmarks: Stream, Stress-ng, and ParFullCMS. Moreover, to make the analysis as realistic as possible, we leverage two production-level power measurement datasets from the Taito, a supercomputing cluster of the Finnish Center of Scientific Computing and also replicate our experiments on Amazon EC2. Our results illustrate different aspects of RAPL and document the findings through comprehensive analysis. Our observations reveal that RAPL readings are highly correlated with plug power, promisingly accurate enough, and have negligible performance overhead. Experimental results suggest RAPL can be a very useful tool to measure and monitor the energy consumption of servers without deploying any complex power meters. We also show that there are still some open issues, such as driver support, non-atomicity of register updates, and unpredictable timings that might weaken the usability of RAPL in certain scenarios. For such scenarios, we pinpoint solutions and workarounds.},
    journal = {ACM Trans. Model. Perform. Eval. Comput. Syst.},
    month = {mar},
    articleno = {9},
    numpages = {26},
    keywords = {power modeling, RAPL validation, RAPL accuracy, RAPL, DRAM power}
}`

@ARTICLE{EnergyConsumptionKnowledge,
    author={Pang, Candy and Hindle, Abram and Adams, Bram and Hassan, Ahmed E.},
    journal={IEEE Software},
    title={What Do Programmers Know about Software Energy Consumption?},
    year={2016},
    volume={33},
    number={3},
    pages={83-89},
    keywords={Software engineering;Energy consumption;Power demand;Energy measurement;Software measurement;Mobile handsets;Battery charge measurement;software energy consumption;energy efficiency;software power consumption;power usage},
    doi={10.1109/MS.2015.83}
}
@InProceedings{VMHPCViability,
        author="Breitbart, Jens
    and Pickartz, Simon
    and Weidendorfer, Josef
    and Monti, Antonello",
        editor="Desprez, Fr{\'e}d{\'e}ric
    and Dutot, Pierre-Fran{\c{c}}ois
    and Kaklamanis, Christos
    and Marchal, Loris
    and Molitorisz, Korbinian
    and Ricci, Laura
    and Scarano, Vittorio
    and Vega-Rodr{\'i}guez, Miguel A.
    and Varbanescu, Ana Lucia
    and Hunold, Sascha
    and Scott, Stephen L.
    and Lankes, Stefan
    and Weidendorfer, Josef",
        title="Viability of Virtual Machines in HPC",
        booktitle="Euro-Par 2016: Parallel Processing Workshops",
        year="2017",
        publisher="Springer International Publishing",
        address="Cham",
        pages="721--733",
        abstract="Virtualization is common in various areas ranging from mobiles to large data centers operated by cloud providers. Theoretically, virtualization provides various benefits that could be useful to HPC as well, e.g., suspend a large application before system maintenance or migrate a process before a node fails due to hardware malfunctioning.",
        isbn="978-3-319-58943-5"
}

@ONLINE{FrontierEnergyUsage,
title = {Fact file: Computing is using more energy than ever.},
url = {https://frontiergroup.org/resources/fact-file-computing-is-using-more-energy-than-ever/}

}

@ONLINE{TIOBE,
    title = {TIOBE Index},
    url = {https://www.tiobe.com/tiobe-index/},
    year = {2024},
}


@article{HistoricalComputingEnergyTrends,
    author = {Koomey, Jonathan and Berard, Stephen and Sanchez, Marla and Wong, Henry},
    year = {2011},
    month = {04},
    pages = {46 - 54},
    title = {Implications of Historical Trends in the Electrical Efficiency of Computing},
    volume = {33},
    journal = {Annals of the History of Computing, IEEE},
    doi = {10.1109/MAHC.2010.28}
}


@ONLINE{IEADataCentres,
    title={Data Centres and Data Transmission Networks},
    url={https://www.iea.org/energy-system/buildings/data-centres-and-data-transmission-networks}
}

@ONLINE{KIOCostsOfDataCentre,
    title = {Costs of a Data Center},
    url = {https://www.kio.tech/en-us/blog/data-center/costs-of-a-data-center},
}

@ONLINE{AssetSpireDataCosts,
    title = {Data Centre Costs},
    url = {https://www.iea.org/energy-system/buildings/data-centres-and-data-transmission-networks},
}

@ONLINE{SmartPhoneFeatures,
    title = {What Smartphone Buyers Really Want},
    url = {https://www.statista.com/chart/5995/the-most-wanted-smartphone-features/},
}
@ONLINE{OperandPower,
    title={Software-based Power Side-Channel Attacks on x86},
    url={https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9519416}
}

# Performance vs Energy usage

@inproceedings{PerformanceVEnergyMobile,
    author = {Chan-Jong-Chu, Kwame and Islam, Tanjina and Exposito, Miguel Morales and Sheombar, Sanjay and Valladares, Christian and Philippot, Olivier and Grua, Eoin Martino and Malavolta, Ivano},
    title = {Investigating the Correlation between Performance Scores and Energy Consumption of Mobile Web Apps},
    year = {2020},
    isbn = {9781450377317},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/3383219.3383239},
    doi = {10.1145/3383219.3383239},
    abstract = {Context. Developers have access to tools like Google Lighthouse to assess the performance of web apps and to guide the adoption of development best practices. However, when it comes to energy consumption of mobile web apps, these tools seem to be lacking. Goal. This study investigates on the correlation between the performance scores produced by Lighthouse and the energy consumption of mobile web apps.Method. We design and conduct an empirical experiment where 21 real mobile web apps are (i) analyzed via the Lighthouse performance analysis tool and (ii) measured on an Android device running a software-based energy profiler. Then, we statistically assess how energy consumption correlates with the obtained performance scores and carry out an effect size estimation.Results. We discover a statistically significant negative correlation between performance scores and the energy consumption of mobile web apps (with medium to large effect sizes), implying that an increase of the performance score tend to lead to a decrease of energy consumption.Conclusions. We recommend developers to strive to improve the performance level of their mobile web apps, as this can also have a positive impact on their energy consumption on Android devices.},
    booktitle = {Proceedings of the 24th International Conference on Evaluation and Assessment in Software Engineering},
    pages = {190–199},
    numpages = {10},
    keywords = {Mobile app development, requirements elicitation, requirements engineering},
    location = {Trondheim, Norway},
    series = {EASE '20}
}


@article{MultithreadingEnergy,
    author = {Pinto, Gustavo and Castor, Fernando and Liu, Yu David},
    title = {Understanding energy behaviors of thread management constructs},
    year = {2014},
    issue_date = {October 2014},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {49},
    number = {10},
    issn = {0362-1340},
    url = {https://doi-org.zorac.aub.aau.dk/10.1145/2714064.2660235},
    doi = {10.1145/2714064.2660235},
    abstract = {Java programmers are faced with numerous choices in managing concurrent execution on multicore platforms. These choices often have different trade-offs (e.g., performance, scalability, and correctness guarantees). This paper analyzes an additional dimension, energy consumption. It presents an empirical study aiming to illuminate the relationship between the choices and settings of thread management constructs and energy consumption. We consider three important thread management constructs in concurrent programming: explicit thread creation, fixed-size thread pooling, and work stealing. We further shed light on the energy/performance trade-off of three ``tuning knobs'' of these constructs: the number of threads, the task division strategy, and the characteristics of processed data. Through an extensive experimental space exploration over real-world Java programs, we produce a list of findings about the energy behaviors of concurrent programs, which are not always obvious. The study serves as a first step toward improving energy efficiency of concurrent programs on parallel architectures.},
    journal = {SIGPLAN Not.},
    month = {oct},
    pages = {345–360},
    numpages = {16},
    keywords = {thread management, performance, multi-threaded programming, java, energy consumption}
}

@inproceedings{ExecutionTimeVsEnergyCost,
    author = {Corral, Luis and Georgiev, Anton B. and Sillitti, Alberto and Succi, Giancarlo},
    title = {Can execution time describe accurately the energy consumption of mobile apps? an experiment in Android},
    year = {2014},
    isbn = {9781450328449},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/2593743.2593748},
    doi = {10.1145/2593743.2593748},
    abstract = {Measuring the energy spent by a software application is a problem that can be solved by having the proper hardware or software instruments. However, not always such tools are available or the provide resolution cannot fit the needs of the user, for instance when measuring a very small piece of code. This problem is particularly relevant on mobile software products, as they are developed to be executed in an environment limited in energy resources. Mobile software engineers should take special consideration on the energy consumption when designing and implementing an application. In this paper, we propose that the energy consumed by a unit of code can be approximated by the execution time. Using software benchmarks run with different data loads, we measured the execution time required to complete the job, and using a software tool to measure the energy spent during the execution of the benchmark, with the objective of finding a relationship among them. We observed that, regardless of the software benchmark, the data load injected and the programming language, of implementation the ratio between the execution time and the energy consumption remains consistent, opening the opportunity to develop techniques to approximate the energy consumption of mobile software based on execution time measurements.},
    booktitle = {Proceedings of the 3rd International Workshop on Green and Sustainable Software},
    pages = {31–37},
    numpages = {7},
    keywords = {Android, Energy Consumption, Execution Time, Mobile},
    location = {Hyderabad, India},
    series = {GREENS 2014}
}

@inproceedings{EnergyEfficiencyAcrossProgrammingLanguages,
    author = {Pereira, Rui and Couto, Marco and Ribeiro, Francisco and Rua, Rui and Cunha, J\'{a}come and Fernandes, Jo\~{a}o Paulo and Saraiva, Jo\~{a}o},
    title = {Energy efficiency across programming languages: how do energy, time, and memory relate?},
    year = {2017},
    isbn = {9781450355254},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi-org.zorac.aub.aau.dk/10.1145/3136014.3136031},
    doi = {10.1145/3136014.3136031},
    abstract = {This paper presents a study of the runtime, memory usage and energy consumption of twenty seven well-known software languages. We monitor the performance of such languages using ten different programming problems, expressed in each of the languages. Our results show interesting findings, such as, slower/faster languages consuming less/more energy, and how memory usage influences energy consumption. Finally, we show how to use our results to provide software engineers support to decide which language to use when energy efficiency is a concern.},
    booktitle = {Proceedings of the 10th ACM SIGPLAN International Conference on Software Language Engineering},
    pages = {256–267},
    numpages = {12},
    keywords = {Energy Efficiency, Green Software, Language Benchmarking, Programming Languages},
    location = {Vancouver, BC, Canada},
    series = {SLE 2017}
}


# Technologies

@ONLINE{BashTime,
    title = {BashTime},
    url = {https://man7.org/linux/man-pages/man1/time.1.html}
}

@ONLINE{PythonLogging,
    title = {Python Logging},
    url = {https://docs.python.org/3/library/logging.html}
}
@ONLINE{PythonTime,
    title = {Python Time},
    url = {https://docs.python.org/3/library/time.html#module-time}
}
@ONLINE{PythonTimePEP,
    title = {Python Time PEP},
    url = {https://peps.python.org/pep-0564/}
}

@ONLINE{PythonProfiler,
    title = {Python Profiler},
    url = {https://docs.python.org/3/library/profile.html},
}

@ONLINE{PythonSystrace,
    title = {Python Sys Settrace},
    url = {https://docs.python.org/3/library/sys.html#sys.settrace},
}

@ONLINE{PythonDis,
    title = {Python Disassembler},
    url = {https://docs.python.org/3/library/dis.html#analysis-functions},
}
@ONLINE{LinuxPowerCap,
    title = {Linux Power Cap},
    url = {https://www.kernel.org/doc/html/latest/admin-guide/pm/powercap.html}
}

@ONLINE{RAPLInterface,
    title = {RAPL Interface},
    url = {https://www.intel.com/content/www/us/en/developer/articles/technical/software-security-guidance/advisory-guidance/running-average-power-limit-energy-reporting.html}
}


# Performance profiling

@ONLINE{MicrosoftProfilingTechniques,
    title = {Profiling Techniques},
    url = {https://docs.microsoft.com/en-us/visualstudio/profiling/profiling-techniques?view=vs-2022}
}

@ONLINE{BenchmarkGame,
    title = {The Computer Language Benchmarks Game},
    url = {https://benchmarksgame-team.pages.debian.net/benchmarksgame/}
}
@ONLINE{DataframeBenchmark,
    title = {Benchmarking High-Performance pandas Alternatives},
    url = {https://www.datacamp.com/tutorial/benchmarking-high-performance-pandas-alternatives}
}